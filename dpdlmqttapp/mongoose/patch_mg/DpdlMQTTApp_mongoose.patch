diff -ruN ./src/net.h ./src_mod/net.h
--- ./src/net.h	2024-04-04 14:08:30
+++ ./src_mod/net.h	2024-04-10 10:02:22
@@ -7,6 +7,8 @@
 #include "str.h"
 #include "timer.h"
 
+#include "uthash.h"
+
 struct mg_dns {
   const char *url;          // DNS server URL
   struct mg_connection *c;  // DNS server connection
@@ -76,6 +78,7 @@
   unsigned is_resp : 1;        // Response is still being generated
   unsigned is_readable : 1;    // Connection is ready to read
   unsigned is_writable : 1;    // Connection is ready to write
+  UT_hash_handle hh; // handl for using in uthash
 };
 
 void mg_mgr_poll(struct mg_mgr *, int ms);
diff -ruN ./src/sock.c ./src_mod/sock.c
--- ./src/sock.c	2024-04-04 14:08:30
+++ ./src_mod/sock.c	2024-04-10 09:31:59
@@ -9,6 +9,7 @@
 #include "url.h"
 #include "util.h"
 
+
 #if MG_ENABLE_SOCKET
 
 #ifndef closesocket
@@ -485,7 +486,7 @@
     if (c->is_closing) ms = 1;
     max++;
   }
-  struct epoll_event *evs = (struct epoll_event *) alloca(max * sizeof(evs[0]));
+  struct epoll_event *evs = (struct epoll_event *) malloc(max * sizeof(evs[0]));
   int n = epoll_wait(mgr->epoll_fd, evs, (int) max, ms);
   for (int i = 0; i < n; i++) {
     struct mg_connection *c = (struct mg_connection *) evs[i].data.ptr;
@@ -503,7 +504,7 @@
 #elif MG_ENABLE_POLL
   nfds_t n = 0;
   for (struct mg_connection *c = mgr->conns; c != NULL; c = c->next) n++;
-  struct pollfd *fds = (struct pollfd *) alloca(n * sizeof(fds[0]));
+  struct pollfd *fds = (struct pollfd *) malloc(n * sizeof(fds[0]));
   memset(fds, 0, n * sizeof(fds[0]));
   n = 0;
   for (struct mg_connection *c = mgr->conns; c != NULL; c = c->next) {
@@ -668,7 +669,7 @@
 bool mg_wakeup(struct mg_mgr *mgr, unsigned long conn_id, const void *buf,
                size_t len) {
   if (mgr->pipe != MG_INVALID_SOCKET && conn_id > 0) {
-    char *extended_buf = (char *) alloca(len + sizeof(conn_id));
+    char *extended_buf = (char *) malloc(len + sizeof(conn_id));
     memcpy(extended_buf, &conn_id, sizeof(conn_id));
     memcpy(extended_buf + sizeof(conn_id), buf, len);
     send(mgr->pipe, extended_buf, len + sizeof(conn_id), MSG_NONBLOCKING);
